## Class
A class is like a blueprint of a specific object. In object-oriented programming, a class defines some properties, fields, events, methods, etc. 
A class defines the kinds of data and the functionality their objects will have. A class enables you to create your custom types by grouping 
variables of other types, methods, and events.

## Enum
An enum lets you declare a series of identifiers for use in your code. The compiler replaces them with numbers for you. It's often useful for 
making your code more readable and maintainable, because you can use descriptive names without the performance penalty of string comparisons. 


## StructStructs (structures)
A struct contains zero or more pieces of data (variables or objects), grouped together so they can be stored, processed, or passed as a single unit. 
A struct can be a lot more complex though. It's actually exactly the same as aclass, except that members are public by default instead of private. Like a
class, a struct can have member functions and template parameters and so on.

## Interface
An interface can be defined using the interface keyword. An interface can contain declarations of methods, properties, indexers, and events. However, 
it cannot contain fields, auto-implemented properties.